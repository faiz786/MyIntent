apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'com.github.dcendents.android-maven'

group='com.github.langara'

android {
    compileSdkVersion vers.androidCompileSdk
    buildToolsVersion vers.androidBuildTools

    lintOptions {
        abortOnError false
    }

    defaultConfig {
        minSdkVersion vers.androidMinSdk
        targetSdkVersion vers.androidTargetSdk
        versionCode vers.code
        versionName vers.name
        testInstrumentationRunner vers.androidTestRunnerClass
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    testOptions {
        unitTests.returnDefaultValues = true
    }
    resourcePrefix 'ml_'
    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
    }
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation project(':myutils')
    testImplementation project(':myutils')
    implementation deps.androidSupportDesign
    implementation deps.androidSupportRecyclerview
    implementation deps.androidSupportCardview
    implementation deps.kotlinStdlib
    testImplementation deps.junit
    testImplementation deps.googleTruth
    androidTestImplementation deps.androidSupportAnnotations
    androidTestImplementation deps.androidTestRunner
    androidTestImplementation deps.androidTestRules
    androidTestImplementation deps.googleTruth
}

// build a jar with source files
task sourcesJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
    classifier = 'sources'
}

//task javadoc(type: Javadoc) {
//    failOnError false
//    source = android.sourceSets.main.java.sourceFiles
//    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
//}

//// build a jar with javadoc
//task javadocJar(type: Jar, dependsOn: javadoc) {
//    classifier = 'javadoc'
//    from javadoc.getDestinationDir()
//}

artifacts {
    archives sourcesJar
//    archives javadocJar
}
