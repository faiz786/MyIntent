apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'

android {
    compileSdkVersion VER_SDK_COMPILE.toInteger()
    buildToolsVersion VER_BUILD_TOOLS

    lintOptions {
        abortOnError false
    }

    defaultConfig {
        applicationId PKG
        minSdkVersion VER_SDK_MIN.toInteger()
        targetSdkVersion VER_SDK_TARGET.toInteger()
        versionCode VER_CODE.toInteger()
        versionName VER_NAME
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }

    signingConfigs {
        release {
            // TODO SOMEDAY: different config for release
            storeFile file('keystore/open.keystore.jks')
            keyAlias 'openkey'
            storePassword 'openkey'
            keyPassword 'openkey'
        }
//        release {
//            storeFile file(System.getenv("MYINTENT_STORE_FILE"))
//            storePassword System.getenv("MYINTENT_STORE_PASSWORD")
//            keyAlias System.getenv("MYINTENT_KEY_ALIAS")
//            keyPassword System.getenv("MYINTENT_KEY_PASSWORD")
//        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            //noinspection GrUnresolvedAccess,GroovyAssignabilityCheck
            signingConfig signingConfigs.release
            def auth = PKG + ".provider"
            resValue "string", "mi_authority", auth
            buildConfigField "String", "AUTHORITY", "\"$auth\""
            buildConfigField "String", "NAME_PREFIX", '"MI "'
            def perm = auth + ".WRITE"
            resValue "string", "mi_permission_write", perm
        }
        debug {
            def suff = ".debug"
            applicationIdSuffix suff
            def auth = PKG + suff + ".provider"
            resValue "string", "mi_authority", auth
            buildConfigField "String", "AUTHORITY", "\"$auth\""
            buildConfigField "String", "NAME_PREFIX", '"MI D "'
            def perm = auth + ".WRITE"
            resValue "string", "mi_permission_write", perm
        }
        canary {
            initWith(buildTypes.debug)
            def suff = ".canary"
            applicationIdSuffix suff
            def auth = PKG + suff + ".provider"
            resValue "string", "mi_authority", auth
            buildConfigField "String", "AUTHORITY", "\"$auth\""
            buildConfigField "String", "NAME_PREFIX", '"MI C "'
            def perm = auth + ".WRITE"
            resValue "string", "mi_permission_write", perm
        }
    }
    testOptions {
        unitTests.returnDefaultValues = true
    }
    resourcePrefix 'mi_'
    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
    }
}

repositories {
    mavenCentral()
}

dependencies {
    compile fileTree(include: ['*.jar'], dir: 'libs')
    testCompile "junit:junit:$VER_JUNIT"
    testCompile "com.google.truth:truth:$VER_GTRUTH"
    androidTestCompile "junit:junit:$VER_JUNIT"
    androidTestCompile "com.google.truth:truth:$VER_GTRUTH"
    androidTestCompile "com.android.support:support-annotations:$VER_ASUPPORT"
    androidTestCompile "com.android.support.test:runner:$VER_ASUPPORT_TEST"
    androidTestCompile "com.android.support.test:rules:$VER_ASUPPORT_TEST"
    compile "com.android.support:appcompat-v7:$VER_ASUPPORT"
    compile "com.android.support:support-annotations:$VER_ASUPPORT"
    canaryCompile "com.squareup.leakcanary:leakcanary-android:$VER_LCANARY"
    debugCompile "com.squareup.leakcanary:leakcanary-android-no-op:$VER_LCANARY"
    releaseCompile "com.squareup.leakcanary:leakcanary-android-no-op:$VER_LCANARY"
    testCompile "com.squareup.leakcanary:leakcanary-android-no-op:$VER_LCANARY"
    compile("com.github.afollestad.material-dialogs:core:$VER_MDIALOGS") {
        transitive = true
    }
    compile("com.github.afollestad.material-dialogs:commons:$VER_MDIALOGS") {
        transitive = true
    }
    compile "com.google.android.gms:play-services-base:$VER_PSERVICES"
    compile "com.google.android.gms:play-services-appindexing:$VER_PSERVICES"
    compile project(':myactivities')
    compile project(':myfragments')
    compile project(':myloggers')
    compile project(':myres')
    compile project(':myutils')
    compile project(':myviews')
    compile "org.jetbrains.kotlin:kotlin-stdlib:$VER_KOTLIN"
    compile "hu.supercluster:paperwork:$VER_PAPERWORK"
}
buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$VER_KOTLIN"
        classpath "org.jetbrains.kotlin:kotlin-android-extensions:$VER_KOTLIN"
        classpath "hu.supercluster:paperwork-plugin:$VER_PAPERWORK"
    }
}

apply plugin: 'hu.supercluster.paperwork'
paperwork {
    set = [
            buildTime: buildTime("yyyy-MM-dd HH:mm:ss"),
            gitSha: gitSha(),
            gitTag: gitTag(),
            gitInfo: gitInfo()
    ]
}


// build a jar with source files
task sourcesJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
    classifier = 'sources'
}

//task javadoc(type: Javadoc) {
//    failOnError false
//    source = android.sourceSets.main.java.sourceFiles
//    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
//}
//
//// build a jar with javadoc
//task javadocJar(type: Jar, dependsOn: javadoc) {
//    classifier = 'javadoc'
//    from javadoc.getDestinationDir()
//}

artifacts {
    archives sourcesJar
//    archives javadocJar
}
