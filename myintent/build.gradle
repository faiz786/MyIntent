apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'

android {
    compileSdkVersion vers.androidCompileSdk
    buildToolsVersion vers.androidBuildTools

    lintOptions {
        abortOnError false
    }

    defaultConfig {
        applicationId vers.pkg
        minSdkVersion vers.androidMinSdk
        targetSdkVersion vers.androidTargetSdk
        versionCode vers.code
        versionName vers.name
        testInstrumentationRunner vers.androidTestRunnerClass
        multiDexEnabled true
    }

    signingConfigs {
        release {
            // TODO SOMEDAY: different config for release
            storeFile file('keystore/open.keystore.jks')
            keyAlias 'openkey'
            storePassword 'openkey'
            keyPassword 'openkey'
        }
//        release {
//            storeFile file(System.getenv("MYINTENT_STORE_FILE"))
//            storePassword System.getenv("MYINTENT_STORE_PASSWORD")
//            keyAlias System.getenv("MYINTENT_KEY_ALIAS")
//            keyPassword System.getenv("MYINTENT_KEY_PASSWORD")
//        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            //noinspection GrUnresolvedAccess,GroovyAssignabilityCheck
            signingConfig signingConfigs.release
            def auth = vers.pkg + ".provider"
            resValue "string", "mi_authority", auth
            buildConfigField "String", "AUTHORITY", "\"$auth\""
            buildConfigField "String", "NAME_PREFIX", '"MI "'
            def perm = auth + ".WRITE"
            resValue "string", "mi_permission_write", perm
        }
        debug {
            def suff = ".debug"
            applicationIdSuffix suff
            def auth = vers.pkg + suff + ".provider"
            resValue "string", "mi_authority", auth
            buildConfigField "String", "AUTHORITY", "\"$auth\""
            buildConfigField "String", "NAME_PREFIX", '"MI D "'
            def perm = auth + ".WRITE"
            resValue "string", "mi_permission_write", perm
        }
//        canary {
//            initWith(buildTypes.debug)
//            def suff = ".canary"
//            applicationIdSuffix suff
//            def auth = vers.pkg + suff + ".provider"
//            resValue "string", "mi_authority", auth
//            buildConfigField "String", "AUTHORITY", "\"$auth\""
//            buildConfigField "String", "NAME_PREFIX", '"MI C "'
//            def perm = auth + ".WRITE"
//            resValue "string", "mi_permission_write", perm
//        }
    }
    packagingOptions {
        exclude 'META-INF/rxjava.properties'
    }
    testOptions {
        unitTests.returnDefaultValues = true
    }
    resourcePrefix 'mi_'
    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
    }
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation deps.androidSupportAppcompat
    implementation deps.androidSupportV13
    implementation deps.androidSupportRecyclerview
    implementation deps.androidSupportDesign
    implementation deps.androidSupportAnnotations
    implementation deps.retrofit

    testImplementation deps.junit
    testImplementation deps.googleTruth
    androidTestImplementation deps.junit
    androidTestImplementation deps.googleTruth
    androidTestImplementation deps.androidSupportAnnotations
    androidTestImplementation deps.androidTestRunner
    androidTestImplementation deps.androidTestRules

//    canaryImplementation deps.leakcanary
    debugImplementation deps.leakcanaryNoOp
    releaseImplementation deps.leakcanaryNoOp
    testImplementation deps.leakcanaryNoOp

    implementation(deps.materialDialogsCore) {
        transitive = true
    }
    implementation(deps.materialDialogsCommons) {
        transitive = true
    }

    implementation project(':myactivities')
    implementation project(':myfragments')
    implementation project(':myloggers')
    implementation project(':myres')
    implementation project(':myutils')
    implementation project(':myviews')
    implementation project(':mydrawables')
    implementation deps.kotlinStdlib
    implementation deps.playServicesBase
    implementation deps.firebaseAppIndexing
    implementation deps.paperwork
}
buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath deps.paperworkPlugin
    }
}

apply plugin: 'hu.supercluster.paperwork'
paperwork {
    set = [
            buildTime: buildTime("yyyy-MM-dd HH:mm:ss"),
            gitSha: gitSha(),
            gitTag: gitTag(),
            gitInfo: gitInfo()
    ]
}


// build a jar with source files
task sourcesJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
    classifier = 'sources'
}

//task javadoc(type: Javadoc) {
//    failOnError false
//    source = android.sourceSets.main.java.sourceFiles
//    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
//}
//
//// build a jar with javadoc
//task javadocJar(type: Jar, dependsOn: javadoc) {
//    classifier = 'javadoc'
//    from javadoc.getDestinationDir()
//}

artifacts {
    archives sourcesJar
//    archives javadocJar
}
