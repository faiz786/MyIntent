buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$VER_KOTLIN"
        classpath "org.jetbrains.kotlin:kotlin-android-extensions:$VER_KOTLIN"
    }
}
repositories {
    mavenCentral()
}

apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'com.github.dcendents.android-maven'

group='com.github.langara'

android {
    compileSdkVersion VER_SDK_COMPILE.toInteger()
    buildToolsVersion VER_BUILD_TOOLS

    lintOptions {
        abortOnError false
    }

    defaultConfig {
        minSdkVersion VER_SDK_MIN.toInteger()
        targetSdkVersion VER_SDK_TARGET.toInteger()
        versionCode VER_CODE.toInteger()
        versionName VER_NAME
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }
    buildTypes {
        release {
            buildConfigField "boolean", "VERBOSE", "false"
            buildConfigField "boolean", "VERY_VERBOSE", "false"
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        debug {
            buildConfigField "boolean", "VERBOSE", "true"
            buildConfigField "boolean", "VERY_VERBOSE", "false"
        }
    }
    testOptions {
        unitTests.returnDefaultValues = true
    }
    resourcePrefix 'mu_'
    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
    }
}

dependencies {
    compile fileTree(include: ['*.jar'], dir: 'libs')
    compile project(':mycorelib')
    compile "com.android.support:support-annotations:$VER_ASUPPORT"
    compile "com.android.support:support-v4:$VER_ASUPPORT"
    compile "com.android.support:appcompat-v7:$VER_ASUPPORT"
    compile "com.android.support:support-v13:$VER_ASUPPORT"
    compile "com.android.support:preference-v14:$VER_ASUPPORT"
    compile "com.android.support:design:$VER_ASUPPORT"
    compile "com.android.support:customtabs:$VER_ASUPPORT"
    compile "com.android.support:percent:$VER_ASUPPORT"
    compile "com.squareup.retrofit2:retrofit:$VER_RETROFIT"
    compile "com.squareup.retrofit2:converter-moshi:$VER_RETROFIT"
    compile "com.squareup.retrofit2:adapter-rxjava:$VER_RETROFIT"
    compile "com.squareup.okhttp3:logging-interceptor:$VER_OKHTTP"
    compile "org.jetbrains.kotlin:kotlin-stdlib:$VER_KOTLIN"
    compile "com.squareup.picasso:picasso:$VER_PICASSO"
    testCompile "junit:junit:$VER_JUNIT"
    testCompile "com.google.truth:truth:$VER_GTRUTH"
    testCompile project(':mytests')
    androidTestCompile "com.android.support.test:runner:$VER_ASUPPORT_TEST"
    androidTestCompile "com.android.support.test:rules:$VER_ASUPPORT_TEST"
}


// build a jar with source files
task sourcesJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
    classifier = 'sources'
}

//task javadoc(type: Javadoc) {
//    failOnError false
//    source = android.sourceSets.main.java.sourceFiles
//    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
//}
//
//// build a jar with javadoc
//task javadocJar(type: Jar, dependsOn: javadoc) {
//    classifier = 'javadoc'
//    from javadoc.getDestinationDir()
//}

artifacts {
    archives sourcesJar
//    archives javadocJar
}
