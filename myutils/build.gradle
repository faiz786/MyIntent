apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'com.github.dcendents.android-maven'

group = 'com.github.langara'

kotlin {
    experimental {
        coroutines "enable"
    }
}

android {
    compileSdkVersion vers.androidCompileSdk
    buildToolsVersion vers.androidBuildTools

    lintOptions {
        abortOnError false
    }

    defaultConfig {
        minSdkVersion vers.androidMinSdk
        targetSdkVersion vers.androidTargetSdk
        versionCode vers.code
        versionName vers.name
        testInstrumentationRunner vers.androidTestRunnerClass
    }
    buildTypes {
        release {
            buildConfigField "boolean", "VERBOSE", "false"
            buildConfigField "boolean", "VERY_VERBOSE", "false"
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        debug {
            buildConfigField "boolean", "VERBOSE", "true"
            buildConfigField "boolean", "VERY_VERBOSE", "false"
        }
    }
    testOptions {
        unitTests.returnDefaultValues = true
    }
    resourcePrefix 'mu_'
    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
    }
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation project(':mycorelib')
    implementation project(':mytests')
    implementation deps.kotlinStdlib
    implementation deps.kotlinxCoroutinesCore
    implementation deps.androidSupportAnnotations
    implementation deps.androidSupportV4
    implementation deps.androidSupportAppcompat
    implementation deps.androidSupportV13
    implementation deps.androidSupportPreference
    implementation deps.androidSupportDesign
    implementation deps.androidSupportCustomtabs
    implementation deps.androidSupportPercent
    implementation deps.retrofit
    implementation deps.retrofitMoshi
    implementation deps.retrofitRxjava
    implementation deps.okhttpLogging
    implementation deps.picasso
    testImplementation project(':mytests')
    testImplementation deps.junit
    testImplementation deps.googleTruth
    androidTestImplementation deps.androidTestRunner
    androidTestImplementation deps.androidTestRules
}

// build a jar with source files
task sourcesJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
    classifier = 'sources'
}

//task javadoc(type: Javadoc) {
//    failOnError false
//    source = android.sourceSets.main.java.sourceFiles
//    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
//}
//
//// build a jar with javadoc
//task javadocJar(type: Jar, dependsOn: javadoc) {
//    classifier = 'javadoc'
//    from javadoc.getDestinationDir()
//}

artifacts {
    archives sourcesJar
//    archives javadocJar
}
